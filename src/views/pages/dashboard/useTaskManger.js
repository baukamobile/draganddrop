import { ref, onMounted } from "vue";
import { getTask, getStatusTask, updateTaskStatus, addColumn, getUsers,addTask } from "@/api/tasks";
import axios from "axios";
import { reactive } from "vue";
const API_URL = "http://127.0.0.1:8000/tasks/tasks";
const API_URL_USERS = "http://127.0.0.1:8000/users/users";
const API_URL_STATUS = "http://127.0.0.1:8000/tasks/status";
const API_URL_PROJECTS = "http://127.0.0.1:8000/tasks/projects";
export const getProject = async () => {
    try {
        const response = await axios.get(`${API_URL_PROJECTS}/`);
        console.log('–ó–∞–≥—Ä—É–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤')
        return response.data;
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞:`, error);
        return null;
    }
};


export function useTaskManager() {
    const tasks = ref([]);
    const statuses = ref([]);
    const projects = ref({});
    const users = ref([]);
    const newStatus = ref({ status_name: "", user: null });
    const newTask = reactive({
        task_name: "—ã–≤–∞–≤—ã",description:"—ã–≤–∞—ã–≤",documents:null,end_date:"",
        agreed_with_managers: false,assigned:14,status:1,priority: 3,projects: 2,department: 1
    })
//–ü—Ä–∏–æ—Ä–∏—Ç–µ  –∑–∞–¥–∞—á
    const priority = {
        1: { priority_name: "–ù–ò–ó–ö–ò–ô", color: "green" },
        2: { priority_name: "–°–†–ï–î–ù–ò–ô", color: "blue" },
        3: { priority_name: "–í–´–°–û–ö–ò–ô", color: "orange" },
        4: { priority_name: "–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô", color: "red" },
    };
//–£–¥–∞–ª–µ–Ω–∏–µ –ö–æ–ª–æ–Ω–æ–∫
    const handleClick = async (statusId) => {
        try {
            await axios.delete(`${API_URL_STATUS}/${statusId}/`);
            statuses.value = statuses.value.filter(status => status.id !== statusId);
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏", error);
        }
    };
//–£–¥–∞–ª–µ–Ω–∏–µ –ó–∞–¥–∞—á
    const handleClickTask = async (taskID) => {
        try {
            await axios.delete(`${API_URL}/${taskID}/`);
            tasks.value = tasks.value.filter(task => task.id !== taskID);
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏", error);
        }
    };

/**
 * 
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
 * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ —Å–æ–±–∏—Ç–∏–∏ drag and drop
 * 
 * @param {DragEvent} e –æ–±—å–µ–∫—Ç —Å–æ–±—ã—Ç–∏–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è 
 * @param {object} task –ó–∞–¥–∞—á–∞ –∫–æ—Ç–æ—Ä—É—é –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ—Ç
 */

    function ondragstart(e, task) {
        e.dataTransfer.dropEffect = "move"; //–í–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–∏
        e.dataTransfer.effectAllowed = "move"; // —Ä–∞–∑—Ä–µ—à–µ–Ω–æ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ
        e.dataTransfer.setData("taskID", task.id.toString()); // –ü–µ—Ä–µ–¥–∞–µ–º ID –∑–∞–¥–∞—á–∏.
        console.log("–ù–∞—á–∞–ª–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è:", task);
    }
    /**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è "drop" ‚Äî –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –ø—Ä–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–∏.
 *
 * @param {DragEvent} e - –û–±—ä–µ–∫—Ç —Å–æ–±—ã—Ç–∏—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è.
 * @param {number} statusId - ID –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞, –≤ –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ—Ç–∞—â–∏–ª–∏ –∑–∞–¥–∞—á—É.
 */
    async function onDrop(e, statusId) {
        e.preventDefault(); // –û—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞.
        const taskID = parseInt(e.dataTransfer.getData("taskID")); // –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–¥–∞—á–∏.


        try {
            await updateTaskStatus(taskID, statusId); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.
            const task = tasks.value.find(t => t.id === taskID); // –ù–∞—Ö–æ–¥–∏–º –∑–∞–¥–∞—á—É –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ.
            if (task) {
                task.status = statusId; // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —É –∫–ª–∏–µ–Ω—Ç–∞.
            }
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏:", error);
        }
    }
//–§–æ—Ä–º–∞—Ç –¥–∞—Ç–∞ –∏–º–µ–Ω–µ–Ω–æ –æ—Ç django —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –Ω–∞ –¥–µ–Ω—å –º–µ—Å—è—Ü –∏ –≤—Ä–µ–º—è
    function formatDate(dateString) {
        const date = new Date(dateString);
        if (!dateString) return "–ù–µ—Ç –¥–∞—Ç—ã"; 
        return date.toLocaleString("ru-RU", { day: "2-digit", month: "long", hour: "2-digit", minute: "2-digit" });
    }
    function formatDateForBackend(dateString) {
        if (!dateString) return null;  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ null/undefined
        
        const date = new Date(dateString);
        if (isNaN(date)) {
            console.error("üî• –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –¥–∞—Ç–∞:", dateString);
            return null;
        }
    
        return date.toISOString().split("T")[0]; // –î–∞—Ç–∞ –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏
    }
    
 // –ª–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫.  
const submitColumn = async () => {
        try {
            console.log("üî• –ü–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π:", JSON.stringify(newTask, null, 2));
console.log("üìå –¢–∏–ø end_date:", typeof newTask.end_date);
            if (!newStatus.value.user) {

                console.error("–û—à–∏–±–∫–∞: user –Ω–µ –≤—ã–±—Ä–∞–Ω!");
                return;
            }
            await addColumn(newStatus.value);
            newStatus.value.status_name = "";
            newStatus.value.user = null;
            statuses.value = await getStatusTask();
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–æ–Ω–∫–∏", error);
        }
    };
    const submitTask = async () => {
        try {
            console.log("–î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π:", newTask);
            newTask.end_date = formatDateForBackend(newTask.end_date);
            if (!newTask || typeof newTask.task_name === "undefined") {
                console.error("–û—à–∏–±–∫–∞: newTask –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!");
                return;
            }
            
            if (!newTask.task_name.trim()) {
                console.error("–ó–∞–¥–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º");
                return;
            }
    
            if (!newTask.projects) {
                alert("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç");
                return;
            }
            console.log("–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞...", JSON.stringify(newTask, null, 2));
await addTask(newTask);
console.log("–ó–∞–ø—Ä–æ—Å —É—à—ë–ª?");


            await addTask(newTask);
            projects.value = await getProject();
    
            Object.assign(newTask, {
                task_name: "",
                description: "",
                documents: null,
                end_date: "",
                agreed_with_managers: false,
                projects: null,
                assigned: null,
                status: 1
            });
    
            tasks.value = await getTask();
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è", error);
        }
    };
    
    
// onmounted –≥—Ä—É–∑–∏—Ç —Ç—Ä–∏ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–¥—Ä—è–¥  –∑–∞–≤–µ—Ä–Ω—É–ª–∏ –≤ Promise.all(), —á—Ç–æ–±—ã –≥—Ä—É–∑–∏–ª–æ—Å—å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ:
onMounted(async () => {
    try {
        const [taskData, statusData, userData, projectData] = await Promise.allSettled([
            getTask(),
            getStatusTask(),
            getUsers(),
            getProject(),
        ]);

        if (taskData.status === "fulfilled") tasks.value = taskData.value;
        if (statusData.status === "fulfilled") statuses.value = statusData.value;
        if (userData.status === "fulfilled") users.value = userData.value;
        if (projectData.status === "fulfilled") projects.value = projectData.value;
        
        console.log("–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:", { tasks: tasks.value, statuses: statuses.value, users: users.value, projects: projects.value });

    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö:", error);
    }
});


    return {
        tasks,
        statuses,
        projects,
        users,
        newStatus,
        newTask,
        priority,
        handleClick,
        handleClickTask,
        ondragstart,
        onDrop,
        formatDate,
        formatDateForBackend,
        submitColumn,
        submitTask,
    };
}


